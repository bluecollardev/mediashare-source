// tslint:disable
/**
 * Tags Service
 * Tags Service
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    TagDto,
} from '../models';

export interface TagControllerFindOneRequest {
    tagId: string;
}

export interface TagControllerRemoveRequest {
    tagId: string;
}

/**
 * no description
 */
export class TagsApi extends BaseAPI {

    /**
     */
    tagControllerFindAll(): Observable<Array<TagDto>>
    tagControllerFindAll(opts?: OperationOpts): Observable<RawAjaxResponse<Array<TagDto>>>
    tagControllerFindAll(opts?: OperationOpts): Observable<Array<TagDto> | RawAjaxResponse<Array<TagDto>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<TagDto>>({
            url: '/api/tags',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    tagControllerFindOne({ tagId }: TagControllerFindOneRequest): Observable<TagDto>
    tagControllerFindOne({ tagId }: TagControllerFindOneRequest, opts?: OperationOpts): Observable<RawAjaxResponse<TagDto>>
    tagControllerFindOne({ tagId }: TagControllerFindOneRequest, opts?: OperationOpts): Observable<TagDto | RawAjaxResponse<TagDto>> {
        throwIfNullOrUndefined(tagId, 'tagId', 'tagControllerFindOne');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<TagDto>({
            url: '/api/tags/{tagId}'.replace('{tagId}', encodeURI(tagId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    tagControllerRemove({ tagId }: TagControllerRemoveRequest): Observable<void>
    tagControllerRemove({ tagId }: TagControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    tagControllerRemove({ tagId }: TagControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(tagId, 'tagId', 'tagControllerRemove');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/api/tags/{tagId}'.replace('{tagId}', encodeURI(tagId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

}
